{-|
Module      : Language.Vigil.Simplify
Description : Definition of the Simplify monad
Copyright   : (c) Jacob Errington and Frederic Lafrance, 2016
License     : MIT
Maintainer  : goto@mail.jerrington.me
Stability   : experimental

Defines the @Simplify@ monad as an instance of
'Language.GoLite.Monad.Traverse.MonadTraversal'. Its purpose is to build a
Vigil syntax tree from a type-and-source annotated GoLite syntax tree.
-}

{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE OverloadedStrings #-}

module Language.Vigil.Simplify where

import Data.Void ( Void )

import Language.Common.Monad.Traverse
import Language.Common.GlobalId
import Language.Vigil.Syntax.Basic
import Language.Vigil.Types

-- | The @Simplify@ monad is a traversal that cannot throw errors, and uses an
-- internal state to keep track of the simplification process.
newtype Simplify a
    = Simplify { unSimplify :: Traversal SimplificationError SimplifyState a }
    deriving
        ( Functor
        , Applicative
        , Monad
        , MonadError SimplificationError
        , MonadState SimplifyState
        )

-- | Runs a computation in the Simplify monad, starting the temporary identifier
-- numbers at the supplied value. The state of the simplification is thrown away.
runSimplify :: Int -> Simplify a -> Either SimplificationError a
runSimplify n t
    = fst $ runIdentity (
        runStateT (
            runExceptT (
                runTraversal (
                    unSimplify t
                )
            )
        ) $
        SimplifyState
            { currentTemp = n
            , newDeclarations = []
            }
    )

instance MonadTraversal Simplify where
    type TraversalError Simplify = Void
    type TraversalState Simplify = SimplifyState
    type TraversalException Simplify = SimplificationError

    reportError = error "unimplemented"

    getErrors = error "unimplemented"

-- | Generate a fresh temporary with the appropriate type.
makeTemp :: Type -> Simplify BasicIdent
makeTemp ty = do
    num <- gets currentTemp
    modify (\s -> s { currentTemp = currentTemp s + 1 })
    return $ GlobalId
                { gidNum = num
                , gidTy = ty
                , gidOrigName = "%tmp"
                , gidOrigin = Local
                }


data SimplifyState
    = SimplifyState -- More will be added later on.
        { currentTemp :: Int
        -- ^ Indicates the number of the next autogenerated temporary identifier.
        , newDeclarations :: [BasicIdent]
        -- ^ What temporaries have been declared so far in the current function.
        }

data SimplificationError
    = InvariantViolation String
    | UnrepresentableType
    deriving ( Show )
